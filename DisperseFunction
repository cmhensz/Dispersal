##Author: Chris Hensz##
##Date: Dec 07, 2017##

##Description##
#This function generates a matrix of coordinates of random dispersal events from a point source (start)

##Arguments##
#type: a character string indicating whether the simulation will be performed on a flat surface or a curved earth surface
#start: a numeric vector of length 2 containing x and y coordinates (for type = 'flat') or longitude and latitude (for type = 'curved')
#npoints: number of simulated points
#angle: the name of a function to be used to generate angles from source
#angleargs: a list of additional arguments to be passed to angle function
#kernel: the name of a function to be used to generate distances from source
#kernelargs: a list of additional arguments to be passed to kernel function

#NOTE: angles are asumed to be in radians (for type = 'flat') or alternatively in bearing degrees (for type = 'curved')
#NOTE: distances (for type = 'curved') are assumed to be in meters

##Function##

disperse=function(type = c('flat', 'curved'), start, npoints, angle, angleargs = list(), kernel, kernelargs = list()){
	if(type == 'flat'){
		theta <- do.call(angle, c(npoints, angleargs))
		dist <- do.call(kernel, c(npoints, kernelargs))
		x <- start[1] + dist*cos(theta)
		y <- start[2] + dist*sin(theta)
		result <- cbind('X' = x, 'Y' = y)
		warning('angle is assumed to be in radians')
	}
	if(type == 'curved'){
		if(suppressWarnings(require(geosphere))){
			theta <- do.call(angle, c(npoints, angleargs))
			dist <- do.call(kernel, c(npoints, kernelargs))
			result <- destPoint(p = start, b = theta, d = dist)
			warning('angle is assumed to be a bearing from 0 to 360 degrees')
			warning('kernel is assumed to be in meters')
			colnames(result) <- c('Longitude', 'Latitude')
		} else stop('package geosphere not detected')
	}
	return(result)	
}
